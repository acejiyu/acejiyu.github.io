<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 备忘录</title>
    <url>/2024/06/11/Git%20%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>Git 是一种开源的分布式版本控制系统，便于在你的笔记本或台式电脑上进行 GitHub 活动。此备忘单总结了常用的 Git 命令行指令，便于快速参考。</p>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>GitHub 提供桌面客户端，包含图形用户界面用于最常见的仓库操作，并自动更新命令行版本的 Git 以应对高级场景。</p>
<ul>
<li><strong>GitHub for Windows</strong> <a href="https://windows.github.com/">htps://windows.github.com</a></li>
<li><strong>GitHub for Mac</strong> <a href="https://mac.github.com/">htps://mac.github.com</a></li>
</ul>
<p>Linux 和 POSIX 系统的 Git 发行版可在 Git SCM 官方网站获取。</p>
<ul>
<li><strong>Git for All Platforms</strong> <a href="http://git-scm.com/">htp://git-scm.com</a></li>
</ul>
<h3 id="配置工具"><a href="#配置工具" class="headerlink" title="配置工具"></a>配置工具</h3><p><strong>配置所有本地仓库的用户信息</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"[name]"</span></span><br></pre></td></tr></tbody></table></figure>

<p>设置提交事务时要附加的用户名。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></tbody></table></figure>

<p>设置提交事务时要附加的邮箱地址。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global color.ui auto</span><br></pre></td></tr></tbody></table></figure>

<p>启用命令行输出的颜色高亮。</p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p><strong>启动一个新仓库或从现有URL获取一个仓库</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git init [project-name]</span><br></pre></td></tr></tbody></table></figure>

<p>创建一个具有指定名称的新本地仓库。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></tbody></table></figure>

<p>下载一个项目及其整个版本历史。</p>
<h3 id="进行更改"><a href="#进行更改" class="headerlink" title="进行更改"></a>进行更改</h3><p><strong>查看编辑并创建一个提交事务</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></tbody></table></figure>

<p>列出所有新文件或修改过的文件，准备提交。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git add [file]</span><br></pre></td></tr></tbody></table></figure>

<p>对文件进行快照，以准备进行版本控制。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git reset [file]</span><br></pre></td></tr></tbody></table></figure>

<p>取消对文件的暂存，但保留其内容。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></tbody></table></figure>

<p>显示尚未暂存的文件差异。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git diff --staged</span><br></pre></td></tr></tbody></table></figure>

<p>显示暂存区域与上次提交之间的文件差异。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">"[descriptive message]"</span></span><br></pre></td></tr></tbody></table></figure>

<p>将文件快照永久记录在版本历史中。</p>
<h3 id="分组更改"><a href="#分组更改" class="headerlink" title="分组更改"></a>分组更改</h3><p><strong>命名一系列提交并合并完成的工作</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></tbody></table></figure>

<p>列出当前仓库中的所有本地分支。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git branch [branch-name]</span><br></pre></td></tr></tbody></table></figure>

<p>创建一个新分支。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git checkout [branch-name]</span><br></pre></td></tr></tbody></table></figure>

<p>切换到指定分支并更新工作目录。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git merge [branch]</span><br></pre></td></tr></tbody></table></figure>

<p>将指定分支的历史合并到当前分支。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git branch -d [branch-name]</span><br></pre></td></tr></tbody></table></figure>

<p>删除指定分支。</p>
<h3 id="重构文件名"><a href="#重构文件名" class="headerlink" title="重构文件名"></a>重构文件名</h3><p><strong>重新定位和删除版本控制的文件</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> [file]</span><br></pre></td></tr></tbody></table></figure>

<p>从工作目录中删除该文件并暂存删除。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> --cached [file]</span><br></pre></td></tr></tbody></table></figure>

<p>将文件从版本控制中移除，但保留本地文件。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">mv</span> [file-original] [file-renamed]</span><br></pre></td></tr></tbody></table></figure>

<p>更改文件名并准备提交。</p>
<h3 id="抑制跟踪"><a href="#抑制跟踪" class="headerlink" title="抑制跟踪"></a>抑制跟踪</h3><p><strong>排除临时文件和路径</strong></p>
<ul>
<li><p><strong>.gitignore 文件</strong> 抑制对匹配指定模式的文件和路径的意外版本控制。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">plaintext复制代码*.log</span><br><span class="line">build/</span><br><span class="line">temp-*</span><br></pre></td></tr></tbody></table></figure>

<p>列出项目中所有忽略的文件。</p>
</li>
<li><p><strong>排除临时文件和路径</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git ls-files --other --ignored --exclude-standard</span><br></pre></td></tr></tbody></table></figure>

<p>列出项目中所有忽略的文件。</p>
</li>
</ul>
<h3 id="保存片段"><a href="#保存片段" class="headerlink" title="保存片段"></a>保存片段</h3><p><strong>搁置并恢复不完整的更改</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></tbody></table></figure>

<p>暂时存储所有修改过的跟踪文件。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></tbody></table></figure>

<p>列出所有暂存的更改集。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></tbody></table></figure>

<p>恢复最近暂存的文件。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git stash drop</span><br></pre></td></tr></tbody></table></figure>

<p>丢弃最近暂存的更改集。</p>
<h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><p><strong>浏览和检查项目文件的演变</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></tbody></table></figure>

<p>列出当前分支的版本历史。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br></pre></td></tr></tbody></table></figure>

<p>列出文件的版本历史，包括重命名。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></tbody></table></figure>

<p>显示两个分支之间的内容差异。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git show [commit]</span><br></pre></td></tr></tbody></table></figure>

<p>输出指定提交的元数据和内容更改。</p>
<h3 id="重做提交"><a href="#重做提交" class="headerlink" title="重做提交"></a>重做提交</h3><p><strong>擦除错误并重写历史</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git reset [commit]</span><br></pre></td></tr></tbody></table></figure>

<p>撤销 [commit] 之后的所有提交，保留更改。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git reset --hard [commit]</span><br></pre></td></tr></tbody></table></figure>

<p>丢弃所有历史和更改，回到指定提交。</p>
<h3 id="同步更改"><a href="#同步更改" class="headerlink" title="同步更改"></a>同步更改</h3><p><strong>注册一个仓库书签并交换版本历史</strong></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git fetch [bookmark]</span><br></pre></td></tr></tbody></table></figure>

<p>下载书签仓库的所有历史记录。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git merge [bookmark]/[branch]</span><br></pre></td></tr></tbody></table></figure>

<p>将书签分支合并到当前本地分支。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git push [<span class="built_in">alias</span>] [branch]</span><br></pre></td></tr></tbody></table></figure>

<p>上传所有本地分支提交到 GitHub。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></tbody></table></figure>

<p>下载书签历史并合并更改。</p>
]]></content>
      <categories>
        <category>VSC</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgres 配置调度任务</title>
    <url>/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>postgres 数据库实现定时任务的方式之一是使用pgAgent插件，下面是pgAgent在Windows平台的配置步骤</p>
<h3 id="安装相关软件"><a href="#安装相关软件" class="headerlink" title="安装相关软件"></a>安装相关软件</h3><ol>
<li><h4 id="安装postgres数据库"><a href="#安装postgres数据库" class="headerlink" title="安装postgres数据库"></a>安装postgres数据库</h4><p><a href="https://www.postgresql.org/download/">点此下载</a></p>
</li>
<li><h4 id="安装pgAgent"><a href="#安装pgAgent" class="headerlink" title="安装pgAgent"></a>安装pgAgent</h4><p><a href="https://www.pgadmin.org/download/pgagent-source-code/">点此下载</a>，也可以使用pgAdmin自带的安装工具安装</p>
<p>安装成功后，pgAdmin界面会显示<strong>pgAgentJobs</strong>选项</p>
</li>
</ol>
<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547642544920.png" class="" width="1547642544920">



<h3 id="设置调度任务"><a href="#设置调度任务" class="headerlink" title="设置调度任务"></a>设置调度任务</h3><ol>
<li><h4 id="创建调度任务"><a href="#创建调度任务" class="headerlink" title="创建调度任务"></a>创建调度任务</h4></li>
</ol>
<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547642907046.png" class="" width="1547642907046">

<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547642941160.png" class="" width="1547642941160">

<ol start="2">
<li><h4 id="创建调度"><a href="#创建调度" class="headerlink" title="创建调度"></a>创建调度</h4></li>
</ol>
<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547643085395.png" class="" width="1547643085395">

<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547643095867.png" class="" width="1547643095867">

<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547643103115.png" class="" width="1547643103115">

<ol start="3">
<li><h4 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h4></li>
</ol>
<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547643146469.png" class="" width="1547643146469">

<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547643155007.png" class="" width="1547643155007">

<p>设置连接数据库必要的参数</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">host</span>=<span class="string">localhost #数据库地址</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">5432 #数据库端口</span></span><br><span class="line"><span class="attr">dbname</span>=<span class="string">demodb #数据库名</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">postgres #数据库用户名</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">000000	#数据库密码</span></span><br><span class="line"><span class="attr">connect_timeout</span>=<span class="string">10 #超时时间</span></span><br></pre></td></tr></tbody></table></figure>

<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547644829747.png" class="" width="1547644829747">

<p>输入任务定时执行的SQL语句</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> demot <span class="keyword">VALUES</span>(<span class="string">'test'</span>)</span><br></pre></td></tr></tbody></table></figure>



<ol start="4">
<li><h4 id="查看执行履历"><a href="#查看执行履历" class="headerlink" title="查看执行履历"></a>查看执行履历</h4></li>
</ol>
<img data-src="/2019/01/16/Postgres-%E9%85%8D%E7%BD%AE%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/1547644920317.png" class="" width="1547644920317">]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>postgres</tag>
        <tag>pgAgent</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Java字符串拼接</title>
    <url>/2019/03/14/%E5%85%B3%E4%BA%8EJava%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>敲了几行关于字符串拼接代码，看了下字节码，发现跟Thinking in Java中描述的并不相同，随即查了一下资料，发现jdk9之后，对字符串的处理方式做出了一些优化。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下面写了一段循环执行字符串拼接的代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrTest</span> {</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">5</span>; i++) {</span><br><span class="line">			<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"str"</span>;</span><br><span class="line">			<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"abc"</span> + str + <span class="string">"def"</span>;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="jdk9之后的字节码"><a href="#jdk9之后的字节码" class="headerlink" title="jdk9之后的字节码"></a>jdk9之后的字节码</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Compiled from "StrTest.java"</span><br><span class="line">public class StrTest {</span><br><span class="line">  public StrTest();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       4: return</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: iconst_0</span><br><span class="line">       1: istore_1</span><br><span class="line">       2: iload_1</span><br><span class="line">       3: iconst_5</span><br><span class="line">       4: if_icmpge     30</span><br><span class="line">       7: ldc           #2                  // String str</span><br><span class="line">       9: astore_2</span><br><span class="line">      10: aload_2</span><br><span class="line">      11: invokedynamic #3,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">      16: astore_3</span><br><span class="line">      17: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      20: aload_3</span><br><span class="line">      21: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      24: iinc          1, 1</span><br><span class="line">      27: goto          2</span><br><span class="line">      30: return</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Java9之前的字节码"><a href="#Java9之前的字节码" class="headerlink" title="Java9之前的字节码"></a>Java9之前的字节码</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Compiled from "StrTest.java"</span><br><span class="line">public class StrTest {</span><br><span class="line">  public StrTest();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       4: return</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: iconst_0</span><br><span class="line">       1: istore_1</span><br><span class="line">       2: iload_1</span><br><span class="line">       3: iconst_5</span><br><span class="line">       4: if_icmpge     48</span><br><span class="line">       7: ldc           #2                  // String str</span><br><span class="line">       9: astore_2</span><br><span class="line">      10: new           #3                  // class java/lang/StringBuilder</span><br><span class="line">      13: dup</span><br><span class="line">      14: invokespecial #4                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">      17: ldc           #5                  // String abc</span><br><span class="line">      19: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      22: aload_2</span><br><span class="line">      23: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      26: ldc           #7                  // String def</span><br><span class="line">      28: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      31: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      34: astore_3</span><br><span class="line">      35: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      38: aload_3</span><br><span class="line">      39: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      42: iinc          1, 1</span><br><span class="line">      45: goto          2</span><br><span class="line">      48: return</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发使用json-server模拟返回数据</title>
    <url>/2019/03/18/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8json-server%E6%A8%A1%E6%8B%9F%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="前端开发使用json-server模拟返回数据"><a href="#前端开发使用json-server模拟返回数据" class="headerlink" title="前端开发使用json-server模拟返回数据"></a>前端开发使用json-server模拟返回数据</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在刚开始的Angular开发中，并没有完全做到前后端分离式开发，这样一来导致前后端的开发进度互相牵绊，影响项目顺利进行，使用Postman工具的mock功能，感觉配置起来相对有点麻烦，后来发现了json-server，配置起来简单一些，功能上也基本满足需求，就简单的了解了一下，并将其应用到项目中。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm i -g json-server</span><br></pre></td></tr></tbody></table></figure>

<h3 id="创建json数据库"><a href="#创建json数据库" class="headerlink" title="创建json数据库"></a>创建json数据库</h3><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">&nbsp; <span class="attr">"posts"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">&nbsp; &nbsp; <span class="punctuation">{</span> <span class="attr">"id"</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"title"</span><span class="punctuation">:</span> <span class="string">"json-server"</span><span class="punctuation">,</span> <span class="attr">"author"</span><span class="punctuation">:</span> <span class="string">"typicode"</span> <span class="punctuation">}</span></span><br><span class="line">&nbsp; <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">&nbsp; <span class="attr">"comments"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">&nbsp; &nbsp; <span class="punctuation">{</span> <span class="attr">"id"</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">"body"</span><span class="punctuation">:</span> <span class="string">"some comment1"</span><span class="punctuation">,</span> <span class="attr">"author"</span><span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"typicode1"</span><span class="punctuation">,</span> <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">}</span><span class="punctuation">,</span><span class="attr">"postId"</span><span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">}</span></span><br><span class="line">&nbsp; <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">&nbsp; <span class="attr">"profile"</span><span class="punctuation">:</span> <span class="punctuation">{</span> <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"typicode"</span> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="启动json-server服务"><a href="#启动json-server服务" class="headerlink" title="启动json-server服务"></a>启动json-server服务</h3><ol>
<li><p>启动本地服务</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">json-server --w db.json</span></span><br><span class="line"></span><br><span class="line">  \{^_^}/ hi!</span><br><span class="line"></span><br><span class="line">  Loading db.json</span><br><span class="line">  Done</span><br><span class="line"></span><br><span class="line">  Resources</span><br><span class="line">  http://localhost:3000/todos</span><br><span class="line"></span><br><span class="line">  Home</span><br><span class="line">  http://localhost:3000</span><br><span class="line"></span><br><span class="line">  Type s + enter at any time to create a snapshot of the database</span><br><span class="line">  Watching...</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>启动远程服务</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">json-server http://example.com/file.json</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">json-server http://jsonplaceholder.typicode.com/db</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在package.json 中添加指令</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"json-server"</span><span class="punctuation">:</span> <span class="string">"json-server --watch db.json"</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>设置服务端口</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">json-server --watch db.json --port 3004</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="配置environment-ts"><a href="#配置environment-ts" class="headerlink" title="配置environment.ts"></a>配置environment.ts</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">src/environments/environment.ts      # 开发环境</span><br><span class="line">src/environments/environment.prod.ts.  # 上线环境</span><br></pre></td></tr></tbody></table></figure>

<p>apiUrl设置为json-server的服务地址</p>
<figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = {</span><br><span class="line">  <span class="attr">production</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">apiUrl</span>: <span class="string">'http://localhost:3000'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p>也可直接使用json-server服务的URL</p>
<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_URL</span> = environment.<span class="property">apiUrl</span>;</span><br><span class="line">...</span><br><span class="line">http.<span class="title function_">get</span>(<span class="variable constant_">API_URL</span> + <span class="string">"posts"</span>)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="json-server提供的请求方式"><a href="#json-server提供的请求方式" class="headerlink" title="json-server提供的请求方式"></a>json-server提供的请求方式</h3><p>GET、POST、PUT、DELETE、PATCH、OPTIONS</p>
<p>注：POST\PUT\PATCH请求需要设置请求头Content-type: application/json</p>
<ol>
<li><p>基础请求方式</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GET    /posts</span><br><span class="line">GET    /posts/:id</span><br><span class="line">POST   /posts</span><br><span class="line">PUT    /posts/:id</span><br><span class="line">PATCH  /posts/:id</span><br><span class="line">DELETE /posts/:id</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取json数据库中所有数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GET /db</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>带参数查找请求方式</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GET /posts?title=json-server&amp;author=typicode</span><br><span class="line">GET /posts?id=1&amp;postid=2</span><br><span class="line">GET /comments?author.name=typicode1  * 使用.访问下级属性值</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>页面分页链接请求（first、last、prev、next）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GET /posts?_page=7</span><br><span class="line">GET /posts?_page=7&amp;_limit=20</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>升降序排列请求</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GET /users?_sort=id&amp;_order=asc</span><br><span class="line">GET /users?_sort=name&amp;_order=asc</span><br><span class="line">多条件升降序： GET /posts?_sort=user,views&amp;_order=desc,asc</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>范围查询数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GET /users?_start=2&amp;_end=20 （类似于substring）</span><br><span class="line">GET /users?_start=2&amp;_limit=3    （类似于substr）</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>根据文字模糊匹配查询数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GET /users?q=情感</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>另外json-server支持自定义路由等其他功能，详情请参照<a href="https://www.npmjs.com/package/json-server">官方文档</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>模拟数据</tag>
        <tag>JSON</tag>
        <tag>json-server</tag>
      </tags>
  </entry>
  <entry>
    <title>由Java-String.intern引申的思考</title>
    <url>/2019/03/14/%E7%94%B1Java-String-intern%E5%BC%95%E7%94%B3%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>闲来翻翻API文档，看到了String类的intern()方法，稍加研究，引发了Java对字符串处理的思考。由此看来，对String类的了解还尚不透彻。</p>
<h3 id="String-intern方法的作用"><a href="#String-intern方法的作用" class="headerlink" title="String.intern方法的作用"></a>String.intern方法的作用</h3><p><em>Returns a canonical representation for the string object. A pool of strings, initially empty, is maintained privately by the class String. When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned. It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true. All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java? Language Specification.</em></p>
<p>上面是jdk源码中对intern方法的详细解释。简单来说就是intern用来返回常量池中的某字符串，如果常量池中已经存在该字符串，则直接返回常量池中该对象的引用。否则，在常量池中加入该对象，然后 返回引用。下面的一个例子详细的解释了intern的作用过程:</p>
<p><em>Now lets understand how Java handles these strings. When you create two string literals:</em></p>
<p><em>String name1 = “Ram”;</em></p>
<p><em>String name2 = “Ram”;</em></p>
<p><em>In this case, JVM searches String constant pool for value “Ram”, and if it does not find it there then it allocates a new memory space and store value “Ram” and return its reference to name1. Similarly, for name2 it checks String constant pool for value “Ram” but this time it find “Ram” there so it does nothing simply return the reference to name2 variable. The way how java handles only one copy of distinct string is called String interning.</em></p>
<h3 id="String-intern方法的演变"><a href="#String-intern方法的演变" class="headerlink" title="String.intern方法的演变"></a>String.intern方法的演变</h3><p>在jdk1.7之前，字符串常量存储在方法区的PermGen Space。在jdk1.7之后，字符串常量重新被移到了堆中。</p>
<h3 id="String类的设计思路"><a href="#String类的设计思路" class="headerlink" title="String类的设计思路"></a>String类的设计思路</h3><p>Java中的String被设计成不可变的，出于以下几点考虑：</p>
<ol>
<li><p>字符串常量池的需要。字符串常量池的诞生是为了提升效率和减少内存分配。可以说编程的多数时间在处理字符串，而处理的字符串中有很大概率会出现重复的情况。正因为String的不可变性，常量池很容易被管理和优化。</p>
</li>
<li><p>安全性考虑。正因为使用字符串的场景如此之多，所以设计成不可变可以有效的防止字符串被有意或者无意的篡改。从java源码中String的设计中我们不难发现，该类被final修饰，同时所有的属性都被final修饰，在源码中也未暴露任何成员变量的修改方法。（当然如果我们想，通过反射或者Unsafe直接操作内存的手段也可以实现对所谓不可变String的修改）。</p>
</li>
<li><p>作为HashMap、HashTable等hash型数据key的必要。因为不可变的设计，jvm底层很容易在缓存String对象的时候缓存其hashcode，这样在执行效率上会大大提升。</p>
</li>
</ol>
<h3 id="深入讨论"><a href="#深入讨论" class="headerlink" title="深入讨论"></a>深入讨论</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"aaa"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">"aaa"</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"bbb"</span>).intern();</span><br><span class="line">s2 = <span class="string">"bbb"</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">"ccc"</span>;</span><br><span class="line">s2 = <span class="string">"ccc"</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"ddd"</span>).intern();</span><br><span class="line">s2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"ddd"</span>).intern();</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">"ab"</span> + <span class="string">"cd"</span>;</span><br><span class="line">s2 = <span class="string">"abcd"</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">"hh"</span>;</span><br><span class="line">s1 = <span class="string">"a"</span> + temp;</span><br><span class="line"><span class="comment">// 如果调用s1.intern 则最终返回true</span></span><br><span class="line">s2 = <span class="string">"ahh"</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">"hh"</span>.intern();</span><br><span class="line">s1 = <span class="string">"a"</span> + temp;</span><br><span class="line">s2 = <span class="string">"ahh"</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">"hh"</span>.intern();</span><br><span class="line">s1 = (<span class="string">"a"</span> + temp).intern();</span><br><span class="line">s2 = <span class="string">"ahh"</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"1"</span>);    <span class="comment">// 同时会生成堆中的对象和常量池中1的对象，但是此时s1指向堆中的对象</span></span><br><span class="line">s1.intern();            <span class="comment">// 常量池中的已经存在</span></span><br><span class="line">s2 = <span class="string">"1"</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"1"</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"1"</span>);    <span class="comment">// 此时生成了四个对象：常量池中的"1" + 2个堆中的"1" + s3指向的堆中的对象（注此时常量池不会生成"11"）</span></span><br><span class="line">s3.intern();    <span class="comment">// jdk1.7之后，常量池不仅仅可以存储对象，还可以存储对象的引用，会直接将s3的地址存储在常量池</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">"11"</span>;    <span class="comment">// jdk1.7之后，常量池中的地址其实就是s3的地址</span></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">// jdk1.7之前false， jdk1.7之后true</span></span><br><span class="line"></span><br><span class="line">s3 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"2"</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"2"</span>);</span><br><span class="line">s4 = <span class="string">"22"</span>;        <span class="comment">// 常量池中不存在22，所以会新开辟一个存储22对象的常量池地址</span></span><br><span class="line">s3.intern();    <span class="comment">// 常量池22的地址和s3的地址不同</span></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure>

<p> 对于什么时候会在常量池存储字符串对象，我想我们可以基本得出结论:</p>
<ol>
<li>显示调用String的intern方法的时候;</li>
<li>直接声明字符串字面常量的时候，例如: <code>String a = "aaa";</code>。</li>
<li>字符串直接常量相加的时候，例如: <code>String c = "aa" + "bb";  </code>其中的aa/bb只要有任何一个不是字符串字面常量形式，都不会在常量池生成”aabb”. 且此时jvm做了优化，不会同时生成”aa”和”bb”在字符串常量池中。</li>
</ol>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Integer[] DB_DATA = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">10</span> * <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; DB_DATA.length; i++) {</span><br><span class="line">    DB_DATA[i] = random.nextInt();</span><br><span class="line">}</span><br><span class="line"><span class="type">long</span> <span class="variable">t</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MAX; i++) {</span><br><span class="line">    arr[i] = <span class="keyword">new</span> <span class="title class_">String</span>(String.valueOf(DB_DATA[i % DB_DATA.length])); <span class="comment">// 每次都要new一个对象</span></span><br><span class="line">    <span class="comment">// arr[i] = new String(String.valueOf(DB_DATA[i % DB_DATA.length])).intern(); // 其实虽然这么多字符串，但是类型最多为10个，大部分重复的字符串,大大减少内存</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">System.out.println((System.currentTimeMillis() - t) + <span class="string">"ms"</span>);</span><br><span class="line">System.gc();</span><br></pre></td></tr></tbody></table></figure>

<p><strong>部分引自 <a href="https://www.cnblogs.com/Kidezyq/p/8040338.html">https://www.cnblogs.com/Kidezyq/p/8040338.html</a></strong></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>私有Repository的配置方法</title>
    <url>/2019/09/09/%E7%A7%81%E6%9C%89Repository%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以下配置方法适用于使用Nexus3.x搭建的私用仓库，包括npm、maven、bower本地使用时的配置方法。<br>Nexus3.x的下载和安装以及Nexus3.x服务的配置请参考相关资料</p>
<h3 id="npm配置"><a href="#npm配置" class="headerlink" title="npm配置"></a>npm配置</h3><ol>
<li><p>电脑已经安装node.js，打开cmd控制台，执行以下指令</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm config get registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">返回当前使用的仓库地址：</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">https://registry.npmjs.org/</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>执行以下指令，将仓库地址切换为本地仓库</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm config set registry http://&lt;host&gt;:&lt;port&gt;/repository/npm-group/</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>执行以下命令，确认仓库切换成功</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm config get registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">返回当前使用的仓库地址：</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">http://&lt;host&gt;:&lt;port&gt;/repository/npm-group/</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><ol>
<li><p>访问文件夹目录：<code>C:\Users\&lt;user_name&gt;\.m2</code></p>
</li>
<li><p>在该目录下创建<code>setting.xml</code>文件，文件内容如下：<br> <a href="settings.zip">点击下载</a> </p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--This sends everything else to /public --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://<span class="tag">&lt;<span class="name">host</span>&gt;</span>:<span class="tag">&lt;<span class="name">port</span>&gt;</span>/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Enable snapshots for the built in central repo to direct --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--all requests to nexus via the mirror --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--make the profile active all the time --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>打开ecilpse，选择以下设置选项：</p>
<p>Preferences&gt;Maven&gt;User Settings&gt;User Settings&gt;Browser…</p>
<p>选择&lt;1&gt;中创建的文件，点击<code>Update Settings</code>按钮</p>
</li>
<li><p>点击<code>Apply and Close</code>保存退出</p>
</li>
<li><p>选择maven项目，<code>Alt+F5</code>确认maven仓库切换成功</p>
</li>
</ol>
<h3 id="bower配置"><a href="#bower配置" class="headerlink" title="bower配置"></a>bower配置</h3><ol>
<li><p>执行以下命令，安装bower的nexus3依赖组件</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm i bower-nexus3-resolver -g</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>访问文件夹目录：<code>C:\Users\&lt;user_name&gt;\</code></p>
</li>
<li><p>在该目录下创建<code>.bowerrc</code>文件，文件内容如下：<br> <a href="bowerrc.zip">点击下载</a> </p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="punctuation">{</span></span><br><span class="line">     <span class="attr">"registry"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">       <span class="attr">"search"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="string">"http://&lt;host&gt;:&lt;port&gt;/repository/bower-group/"</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"resolvers"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">"bower-nexus3-resolver"</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>nexus</category>
      </categories>
      <tags>
        <tag>私有仓库</tag>
        <tag>Repository</tag>
      </tags>
  </entry>
  <entry>
    <title>软件开发流程</title>
    <url>/2024/05/08/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>当前先进的软件开发流程通常采用敏捷开发、DevOps 和 CI/CD（持续集成/持续交付）等方法，以实现更快的交付、更高的质量和更好的团队协作。以下是一个典型的软件开发流程，并列举了在每个阶段可能使用的一些主流工具和实践：</p>
<ol>
<li><strong>需求分析和设计：</strong><ul>
<li><strong>工具：</strong> Jira、Trello、Confluence、Lucidchart 等</li>
<li><strong>实践：</strong> 用户故事、敏捷方法、设计思维</li>
</ul>
</li>
<li><strong>UX 设计：</strong><ul>
<li><strong>工具：</strong> Figma、Sketch、Adobe XD 等</li>
<li><strong>实践：</strong> 用户体验设计、原型设计、用户测试</li>
</ul>
</li>
<li><strong>API 设计：</strong><ul>
<li><strong>工具：</strong> Swagger、Stoplight、Postman 等</li>
<li><strong>实践：</strong> OpenAPI 规范、RESTful 设计原则</li>
</ul>
</li>
<li><strong>开发文档：</strong><ul>
<li><strong>工具：</strong> Swagger、ReDoc、Slate 等</li>
<li><strong>实践：</strong> 写作规范、文档即代码（Docs as Code）</li>
</ul>
</li>
<li><strong>软件开发：</strong><ul>
<li><strong>语言和框架：</strong> 根据项目需求选择，如 JavaScript/Node.js、Python/Django、Java/Spring Boot、Ruby on Rails、Go、等。</li>
<li><strong>版本控制：</strong> Git、GitHub、GitLab、Bitbucket 等</li>
<li><strong>协作：</strong> Pull Request、Code Review、Git Flow 等</li>
</ul>
</li>
<li><strong>代码质量：</strong><ul>
<li><strong>静态代码分析：</strong> SonarQube、ESLint、Pylint 等</li>
<li><strong>单元测试：</strong> JUnit、PyTest、Mocha、Jest 等</li>
<li><strong>代码覆盖率：</strong> Istanbul、JaCoCo 等</li>
</ul>
</li>
<li><strong>自动化测试：</strong><ul>
<li><strong>端到端测试：</strong> Selenium、Cypress、Appium 等</li>
<li><strong>集成测试：</strong> Postman、RestAssured、Supertest 等</li>
<li><strong>持续集成：</strong> Jenkins、Travis CI、CircleCI、GitLab CI 等</li>
</ul>
</li>
<li><strong>部署发布：</strong><ul>
<li><strong>容器化：</strong> Docker、Kubernetes 等</li>
<li><strong>自动化部署：</strong> Ansible、Chef、Puppet 等</li>
<li><strong>CI/CD：</strong> GitLab CI/CD、Jenkins、GitHub Actions、Travis CI 等</li>
</ul>
</li>
</ol>
<p>这只是一个概要，实际项目中可能根据团队和项目的具体需求进行调整。不同的团队和组织可能会选择不同的工具和实践，以适应其特定的工作流程和技术栈。</p>
]]></content>
      <categories>
        <category>软件开发</category>
      </categories>
      <tags>
        <tag>软件开发</tag>
        <tag>敏捷开发</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
</search>
